!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALLDICT	old_generate_namelists.py	/^ALLDICT = {}$/;"	v
AreaFill	_alt_verif_parallel.py	/^from evac.plot.areafill import AreaFill$/;"	i
AreaFill	_old_verif_parallel.py	/^from evac.plot.areafill import AreaFill$/;"	i
AreaFill	verif_parallel.py	/^from evac.plot.areafill import AreaFill$/;"	i
BE	test_verif.py	/^                BE = BirdsEye(ax=ax,fig=fig,proj='merc')$/;"	v
Basemap	_alt_verif_parallel.py	/^from mpl_toolkits.basemap import Basemap$/;"	i
Basemap	_old_verif_parallel.py	/^from mpl_toolkits.basemap import Basemap$/;"	i
Basemap	extract_fields.py	/^from mpl_toolkits.basemap import Basemap$/;"	i
Basemap	verif_parallel.py	/^from mpl_toolkits.basemap import Basemap$/;"	i
BirdsEye	_alt_verif_parallel.py	/^from evac.plot.birdseye import BirdsEye$/;"	i
BirdsEye	_old_verif_parallel.py	/^from evac.plot.birdseye import BirdsEye$/;"	i
BirdsEye	ensemble_verification.py	/^from evac.plot.birdseye import BirdsEye$/;"	i
BirdsEye	test_verif.py	/^from evac.plot.birdseye import BirdsEye$/;"	i
BirdsEye	verif_parallel.py	/^from evac.plot.birdseye import BirdsEye$/;"	i
BoxPlot	_alt_verif_parallel.py	/^from evac.plot.boxplot import BoxPlot$/;"	i
BoxPlot	_old_verif_parallel.py	/^from evac.plot.boxplot import BoxPlot$/;"	i
BoxPlot	verif_parallel.py	/^from evac.plot.boxplot import BoxPlot$/;"	i
CASES	_alt_verif_parallel.py	/^CASES = collections.OrderedDict()$/;"	v
CASES	_old_verif_parallel.py	/^CASES = collections.OrderedDict()$/;"	v
CASES	extract_fields.py	/^CASES = collections.OrderedDict()$/;"	v
CASES	old_verif.py	/^CASES = collections.OrderedDict()$/;"	v
CASES	old_verif.py	/^CASES = {$/;"	v
CASES	run_experiments.py	/^CASES = {$/;"	v
CASES	verif_parallel.py	/^CASES = collections.OrderedDict()$/;"	v
Casati	_alt_verif_parallel.py	/^from evac.stats.casati import Casati$/;"	i
Casati	_old_verif_parallel.py	/^from evac.stats.casati import Casati$/;"	i
Casati	verif_parallel.py	/^from evac.stats.casati import Casati$/;"	i
CaseGrid	extract_fields.py	/^class CaseGrid:$/;"	c
DOMS	_test_newruns.py	/^DOMS = ($/;"	v
DetScores	_alt_verif_parallel.py	/^from evac.stats.detscores import DetScores$/;"	i
DetScores	_old_verif_parallel.py	/^from evac.stats.detscores import DetScores$/;"	i
DetScores	old_verif.py	/^from evac.stats.detscores import DetScores$/;"	i
DetScores	verif_parallel.py	/^from evac.stats.detscores import DetScores$/;"	i
E	ensemble_verification.py	/^E = Ensemble(dataroot,initutc,ctrl=False,loadobj=False,doms=2)$/;"	v
E	old_verif.py	/^        E = Ensemble(ensdir,initutc,ndoms=2,ctrl=False)$/;"	v
E	test_crps.py	/^        E = Ensemble(datadir,initutc,ndoms=2,ctrl=False)$/;"	v
E	test_kde.py	/^E = Ensemble(rootdir=enspath,initutc=initutc,ndoms=2,ctrl=False,$/;"	v
E	test_verif.py	/^E = Ensemble(dataroot,initutc,ctrl=False,loadobj=False,doms=2)$/;"	v
EFSS	_alt_verif_parallel.py	/^from evac.stats.efss import EFSS$/;"	i
EFSS	_old_verif_parallel.py	/^from evac.stats.efss import EFSS$/;"	i
EFSS	verif_parallel.py	/^from evac.stats.efss import EFSS$/;"	i
EFSS_Intensity	_alt_verif_parallel.py	/^from evac.plot.efss_intensity import EFSS_Intensity$/;"	i
EFSS_Intensity	_old_verif_parallel.py	/^from evac.plot.efss_intensity import EFSS_Intensity$/;"	i
EFSS_Intensity	verif_parallel.py	/^from evac.plot.efss_intensity import EFSS_Intensity$/;"	i
ESAL	_alt_verif_parallel.py	/^from evac.stats.esal import ESAL$/;"	i
ESAL	_old_verif_parallel.py	/^from evac.stats.esal import ESAL$/;"	i
ESAL	verif_parallel.py	/^from evac.stats.esal import ESAL$/;"	i
Ensemble	_alt_verif_parallel.py	/^from evac.datafiles.ensemble import Ensemble$/;"	i
Ensemble	_old_verif_parallel.py	/^from evac.datafiles.ensemble import Ensemble$/;"	i
Ensemble	ensemble_verification.py	/^from evac.datafiles.ensemble import Ensemble$/;"	i
Ensemble	old_verif.py	/^from evac.datafiles.ensemble import Ensemble$/;"	i
Ensemble	test_crps.py	/^from evac.datafiles.ensemble import Ensemble$/;"	i
Ensemble	test_kde.py	/^from evac.datafiles.ensemble import Ensemble$/;"	i
Ensemble	test_verif.py	/^from evac.datafiles.ensemble import Ensemble$/;"	i
Ensemble	verif_parallel.py	/^from evac.datafiles.ensemble import Ensemble$/;"	i
FI	_alt_verif_parallel.py	/^from evac.stats.fi import FI$/;"	i
FI	_old_verif_parallel.py	/^from evac.stats.fi import FI$/;"	i
FI	verif_parallel.py	/^from evac.stats.fi import FI$/;"	i
FOLDER	extract_fields.py	/^        FOLDER = "NEED FOLDERS HERE"$/;"	v
FOLDERS	_test_newruns.py	/^FOLDERS = ($/;"	v
ForecastValue	_alt_verif_parallel.py	/^from evac.stats.forecastvalue import ForecastValue$/;"	i
ForecastValue	_old_verif_parallel.py	/^from evac.stats.forecastvalue import ForecastValue$/;"	i
ForecastValue	verif_parallel.py	/^from evac.stats.forecastvalue import ForecastValue$/;"	i
GRIDS	extract_fields.py	/^    GRIDS = {}$/;"	v
Grid	_alt_verif_parallel.py	/^from evac.utils.grid import Grid$/;"	i
Grid	_old_verif_parallel.py	/^from evac.utils.grid import Grid$/;"	i
Grid	verif_parallel.py	/^from evac.utils.grid import Grid$/;"	i
Histogram	_alt_verif_parallel.py	/^from evac.plot.histogram import Histogram$/;"	i
Histogram	_old_verif_parallel.py	/^from evac.plot.histogram import Histogram$/;"	i
Histogram	verif_parallel.py	/^from evac.plot.histogram import Histogram$/;"	i
KernelDensity	test_kde.py	/^from sklearn.neighbors.kde import KernelDensity$/;"	i
L	run_experiments.py	/^        L = LazyEnsemble(**init_kwargs)$/;"	v
LBCdir	run_experiments.py	/^            LBCdir = wofdir \/ newse_mem$/;"	v
LazyEnsemble	run_experiments.py	/^from evac.lazy.lazyensemble import LazyEnsemble$/;"	i
LineGraph	_alt_verif_parallel.py	/^from evac.plot.linegraph import LineGraph$/;"	i
LineGraph	_old_verif_parallel.py	/^from evac.plot.linegraph import LineGraph$/;"	i
LineGraph	verif_parallel.py	/^from evac.plot.linegraph import LineGraph$/;"	i
M	_alt_verif_parallel.py	/^import matplotlib as M$/;"	i
M	_old_verif_parallel.py	/^import matplotlib as M$/;"	i
M	extract_fields.py	/^import matplotlib as M$/;"	i
M	test_kde.py	/^import matplotlib as M$/;"	i
M	verif_parallel.py	/^import matplotlib as M$/;"	i
MEMS	_test_newruns.py	/^MEMS = ['m0{}'.format(n) for n in range(1,5)]$/;"	v
Map	test_crps.py	/^from evac.plot.map import Map$/;"	i
N	_alt_verif_parallel.py	/^import numpy as N$/;"	i
N	_old_verif_parallel.py	/^import numpy as N$/;"	i
N	_test_newruns.py	/^import numpy as N$/;"	i
N	ensemble_verification.py	/^import numpy as N$/;"	i
N	extract_fields.py	/^import numpy as N$/;"	i
N	generate_namelists.py	/^import numpy as N$/;"	i
N	old_generate_namelists.py	/^import numpy as N$/;"	i
N	old_verif.py	/^import numpy as N$/;"	i
N	run_experiments.py	/^import numpy as N$/;"	i
N	test_crps.py	/^import numpy as N$/;"	i
N	test_kde.py	/^import numpy as N$/;"	i
N	test_verif.py	/^import numpy as N$/;"	i
N	verif_parallel.py	/^import numpy as N$/;"	i
NL	generate_namelists.py	/^NL = {n:{} for n in ensnums}$/;"	v
NL	old_generate_namelists.py	/^NL = {}$/;"	v
NS	generate_namelists.py	/^NS = parser.parse_args()$/;"	v
NS	old_generate_namelists.py	/^NS = parser.parse_args()$/;"	v
OBS	old_verif.py	/^OBS = (ST4,RADARS)$/;"	v
ObjectBased	_alt_verif_parallel.py	/^from evac.stats.objectbased import ObjectBased$/;"	i
ObjectBased	_old_verif_parallel.py	/^from evac.stats.objectbased import ObjectBased$/;"	i
ObjectBased	verif_parallel.py	/^from evac.stats.objectbased import ObjectBased$/;"	i
ObjectID	test_objectid.py	/^from objectID import ObjectID$/;"	i
ObsGroup	_alt_verif_parallel.py	/^from evac.datafiles.obsgroup import ObsGroup$/;"	i
ObsGroup	_old_verif_parallel.py	/^from evac.datafiles.obsgroup import ObsGroup$/;"	i
ObsGroup	extract_fields.py	/^from evac.datafiles.obsgroup import ObsGroup$/;"	i
ObsGroup	old_verif.py	/^from evac.datafiles.obsgroup import ObsGroup$/;"	i
ObsGroup	verif_parallel.py	/^from evac.datafiles.obsgroup import ObsGroup$/;"	i
PRES	run_experiments.py	/^        PRES = {wrfdir\/p:'copy' for p in pres}$/;"	v
Performance	_alt_verif_parallel.py	/^from evac.plot.performance import Performance$/;"	i
Performance	_old_verif_parallel.py	/^from evac.plot.performance import Performance$/;"	i
Performance	verif_parallel.py	/^from evac.plot.performance import Performance$/;"	i
Pool	test_kde.py	/^        from multiprocessing import Pool$/;"	i
PosixPath	run_experiments.py	/^from pathlib import PosixPath$/;"	i
ProbScores	_alt_verif_parallel.py	/^from evac.stats.probscores import ProbScores$/;"	i
ProbScores	_old_verif_parallel.py	/^from evac.stats.probscores import ProbScores$/;"	i
ProbScores	test_crps.py	/^from evac.stats.probscores import ProbScores$/;"	i
ProbScores	verif_parallel.py	/^from evac.stats.probscores import ProbScores$/;"	i
R	test_verif.py	/^            R = R_large$/;"	v
R	test_verif.py	/^            R = R_small$/;"	v
RADARS	old_verif.py	/^RADARS = ObsGroup(radardir,'radar')$/;"	v
R_large	test_verif.py	/^    R_large = Radar(plotutc,radardir)$/;"	v
R_small	test_verif.py	/^    R_small = copy.copy(R_large)$/;"	v
Radar	_alt_verif_parallel.py	/^from evac.datafiles.radar import Radar$/;"	i
Radar	_old_verif_parallel.py	/^from evac.datafiles.radar import Radar$/;"	i
Radar	ensemble_verification.py	/^from evac.datafiles.radar import Radar$/;"	i
Radar	test_verif.py	/^from evac.datafiles.radar import Radar$/;"	i
Radar	verif_parallel.py	/^from evac.datafiles.radar import Radar$/;"	i
S	_test_newruns.py	/^                    S = Scales(vrbl=vrbl)$/;"	v
S	ensemble_verification.py	/^S = Scales('REFL_comp')$/;"	v
S	test_verif.py	/^S = Scales('REFL_comp')$/;"	v
SALGraph	_alt_verif_parallel.py	/^from evac.plot.salgraph import SALGraph$/;"	i
SALGraph	_old_verif_parallel.py	/^from evac.plot.salgraph import SALGraph$/;"	i
SALGraph	verif_parallel.py	/^from evac.plot.salgraph import SALGraph$/;"	i
SPDICT	old_generate_namelists.py	/^SPDICT = {}$/;"	v
ST4	ensemble_verification.py	/^ST4 = StageIV(st4dir)$/;"	v
ST4	extract_fields.py	/^ST4 = ObsGroup(st4dir,'stageiv')$/;"	v
ST4	old_verif.py	/^ST4 = ObsGroup(st4dir,'stageiv')$/;"	v
STOCHS	old_generate_namelists.py	/^        STOCHS = generate_LHS_draw(seed_lhs,)$/;"	v
Scales	_alt_verif_parallel.py	/^from evac.plot.scales import Scales$/;"	i
Scales	_old_verif_parallel.py	/^from evac.plot.scales import Scales$/;"	i
Scales	_test_newruns.py	/^from evac.plot.scales import Scales$/;"	i
Scales	ensemble_verification.py	/^from evac.plot.scales import Scales$/;"	i
Scales	test_verif.py	/^from evac.plot.scales import Scales$/;"	i
Scales	verif_parallel.py	/^from evac.plot.scales import Scales$/;"	i
StageIV	test_crps.py	/^from evac.datafiles.stageiv import StageIV$/;"	i
ThumbNails	_alt_verif_parallel.py	/^from evac.plot.thumbnails import ThumbNails$/;"	i
ThumbNails	_old_verif_parallel.py	/^from evac.plot.thumbnails import ThumbNails$/;"	i
ThumbNails	verif_parallel.py	/^from evac.plot.thumbnails import ThumbNails$/;"	i
V	old_verif.py	/^        V = Verif(ensemble=E,obs=OBS,outdir=outdir,$/;"	v
V2	old_verif.py	/^        V2 = Verif(obs=OBS,outdir=outdir,$/;"	v
VG1	test_crps.py	/^            VG1 = VerifGrid(W1,nx=nx,ny=ny)$/;"	v
VG2	test_crps.py	/^            VG2 = VerifGrid(W2,nx=nx,ny=ny)$/;"	v
VRBLS	_test_newruns.py	/^VRBLS = ($/;"	v
Verif	_alt_verif_parallel.py	/^from evac.stats.verif import Verif$/;"	i
Verif	_old_verif_parallel.py	/^from evac.stats.verif import Verif$/;"	i
Verif	old_verif.py	/^from evac.stats.verif import Verif$/;"	i
Verif	verif_parallel.py	/^from evac.stats.verif import Verif$/;"	i
VerifGrid	test_crps.py	/^from evac.utils.reproject_tools import reproject, WRF_native_grid, create_new_grid, VerifGrid$/;"	i
W	_test_newruns.py	/^                W = WRFOut(fpath)$/;"	v
W	test_verif.py	/^        W = E.arbitrary_pick(dom=dom,dataobj=True)$/;"	v
W1	test_crps.py	/^            W1 = WRF_native_grid(E.arbitrary_pick(give_path=True,dom=1))$/;"	v
W2	test_crps.py	/^            W2 = WRF_native_grid(E.arbitrary_pick(give_path=True,dom=2))$/;"	v
WRFOut	_alt_verif_parallel.py	/^from evac.datafiles.wrfout import WRFOut$/;"	i
WRFOut	_old_verif_parallel.py	/^from evac.datafiles.wrfout import WRFOut$/;"	i
WRFOut	_test_newruns.py	/^from evac.datafiles.wrfout import WRFOut$/;"	i
WRFOut	extract_fields.py	/^from evac.datafiles.wrfout import WRFOut$/;"	i
WRFOut	verif_parallel.py	/^from evac.datafiles.wrfout import WRFOut$/;"	i
WRF_native_grid	test_crps.py	/^from evac.utils.reproject_tools import reproject, WRF_native_grid, create_new_grid, VerifGrid$/;"	i
__get_cut_radar	_old_verif_parallel.py	/^def __get_cut_radar(utc,E,return_grid=False):$/;"	f	file:
__get_cut_radar	verif_parallel.py	/^def __get_cut_radar(utc,E,return_grid=False):$/;"	f	file:
__init__	extract_fields.py	/^    def __init__(self,d02_fpath):$/;"	m	class:CaseGrid
all_folders	extract_fields.py	/^all_folders = list(generate_all_folders())$/;"	v
allow_empty	test_kde.py	/^                allow_empty=False)$/;"	v
argparse	_alt_verif_parallel.py	/^import argparse$/;"	i
argparse	_old_verif_parallel.py	/^import argparse$/;"	i
argparse	extract_fields.py	/^import argparse$/;"	i
argparse	generate_namelists.py	/^import argparse$/;"	i
argparse	old_generate_namelists.py	/^import argparse$/;"	i
argparse	verif_parallel.py	/^import argparse$/;"	i
ax	_test_newruns.py	/^                ax = next(axit)$/;"	v
ax	test_kde.py	/^        ax = axes.flat[0]$/;"	v
ax	test_kde.py	/^        ax = axes.flat[1]$/;"	v
ax	test_kde.py	/^    ax = axes.flat[0]$/;"	v
ax	test_kde.py	/^    ax = axes.flat[1]$/;"	v
ax0	test_kde.py	/^    ax0 = sns.kdeplot(fcst1D,cut=0,cumulative=False,bw=bw)$/;"	v
ax1	test_kde.py	/^    ax1 = sns.kdeplot(fcst1D,cumulative=True,bw=bw)$/;"	v
ax2	test_kde.py	/^    ax2 = sns.kdeplot(fcst1D,clip=(0,N.inf),bw=bw)$/;"	v
ax3	test_kde.py	/^    ax3 = sns.kdeplot(fcst1Da,cut=0,bw=bw)$/;"	v
axit	_test_newruns.py	/^        axit = iter(axes.flatten())$/;"	v
basic_tests	_old_verif_parallel.py	/^basic_tests = parser.parse_args().tests$/;"	v
basic_tests	verif_parallel.py	/^basic_tests = parser.parse_args().tests$/;"	v
bl_mems	generate_namelists.py	/^    bl_mems = sorted(x+(6*n) for x in [1,2] for n in range(int(600\/6)))$/;"	v
bl_mems	old_generate_namelists.py	/^        bl_mems = [x+(6*n) for x in [1,2] for n in range(5)]$/;"	v
bl_pbl_physics	generate_namelists.py	/^bl_pbl_physics = None $/;"	v
bl_pbl_physics	old_generate_namelists.py	/^bl_pbl_physics = None $/;"	v
bw	test_kde.py	/^                bw = get_bw(fcst1D)$/;"	v
bw	test_kde.py	/^            bw = get_bw(fcst1D,factor=bwfc)$/;"	v
bw	test_kde.py	/^    bw = get_bw(fcst1D)$/;"	v
casati_cut	_old_verif_parallel.py	/^def casati_cut(arr,nsq):$/;"	f
casati_cut	verif_parallel.py	/^def casati_cut(arr,nsq):$/;"	f
casedt	generate_namelists.py	/^casedt = datetime.datetime.strptime(casestr,"%Y%m%d")$/;"	v
casehour	generate_namelists.py	/^casehour = 0$/;"	v
casestr	extract_fields.py	/^    casestr = utils.string_from_time('dir',caseutc,strlen='day')$/;"	v
casestr	generate_namelists.py	/^casestr = str(NS.casestr)$/;"	v
casestr	old_verif.py	/^    casestr = utils.string_from_time('dir',caseutc,strlen='day')$/;"	v
casestr	run_experiments.py	/^        casestr = utils.string_from_time('dir',caseutc,strlen='day')$/;"	v
cbar_ax	test_kde.py	/^        cbar_ax = fig.add_axes([0.15,0.087,0.7,0.025])$/;"	v
cbar_ax	test_kde.py	/^    cbar_ax = fig.add_axes([0.15,0.087,0.7,0.025])$/;"	v
cf	test_kde.py	/^        cf = ax.contourf(xx,yy,fcst_pp,cmap=M.cm.jet,levels=levels)$/;"	v
cf	test_kde.py	/^        cf = ax.contourf(xx,yy,rawpc,cmap=M.cm.jet,levels=levels)$/;"	v
cf	test_kde.py	/^    cf = ax.contourf(xx,yy,fcst_pp,cmap=M.cm.jet,levels=levels)$/;"	v
cf	test_kde.py	/^    cf = ax.contourf(xx,yy,rawpc,cmap=M.cm.jet,levels=levels)$/;"	v
check_before	run_experiments.py	/^check_before = False$/;"	v
check_only	_old_verif_parallel.py	/^check_only = parser.parse_args().check_only$/;"	v
check_only	verif_parallel.py	/^check_only = parser.parse_args().check_only$/;"	v
check_wrfout	_old_verif_parallel.py	/^def check_wrfout(itr):$/;"	f
closest	extract_fields.py	/^def closest(arr,val):$/;"	f
cmap	_test_newruns.py	/^                    cmap = 'gist_earth_r'$/;"	v
cmap	_test_newruns.py	/^                    cmap = S.cm$/;"	v
cmd	run_experiments.py	/^            cmd = ("python generate_namelists.py --donotenforce --nmems {}"$/;"	v
collections	_alt_verif_parallel.py	/^import collections$/;"	i
collections	_old_verif_parallel.py	/^import collections$/;"	i
collections	extract_fields.py	/^import collections$/;"	i
collections	old_verif.py	/^import collections$/;"	i
collections	verif_parallel.py	/^import collections$/;"	i
commands	extract_fields.py	/^commands = []$/;"	v
compute_brier	_old_verif_parallel.py	/^compute_brier = 0$/;"	v
compute_brier	verif_parallel.py	/^compute_brier = 0$/;"	v
compute_casati	_old_verif_parallel.py	/^compute_casati = 0$/;"	v
compute_casati	verif_parallel.py	/^compute_casati = 0$/;"	v
compute_crps	_old_verif_parallel.py	/^compute_crps = 0$/;"	v
compute_crps	old_verif.py	/^compute_crps = 0$/;"	v
compute_crps	verif_parallel.py	/^compute_crps = 0$/;"	v
compute_detscores	_old_verif_parallel.py	/^compute_detscores = 0$/;"	v
compute_detscores	old_verif.py	/^compute_detscores = 0$/;"	v
compute_detscores	verif_parallel.py	/^compute_detscores = 0$/;"	v
compute_fi	_old_verif_parallel.py	/^compute_fi = 0$/;"	v
compute_fi	verif_parallel.py	/^compute_fi = 0$/;"	v
compute_fss	_old_verif_parallel.py	/^compute_fss = 0$/;"	v
compute_fss	verif_parallel.py	/^compute_fss = 0$/;"	v
compute_fv	_old_verif_parallel.py	/^compute_fv = 0$/;"	v
compute_fv	verif_parallel.py	/^compute_fv = 0$/;"	v
compute_obj	_alt_verif_parallel.py	/^compute_obj = False$/;"	v
compute_obj	_old_verif_parallel.py	/^compute_obj = 1$/;"	v
compute_obj	old_verif.py	/^compute_obj = 0$/;"	v
compute_obj	verif_parallel.py	/^compute_obj = 1$/;"	v
config	run_experiments.py	/^        config = 'default'$/;"	v
copy	_old_verif_parallel.py	/^        import copy$/;"	i
copy	ensemble_verification.py	/^import copy$/;"	i
copy	test_crps.py	/^import copy$/;"	i
copy	test_verif.py	/^import copy$/;"	i
copy	verif_parallel.py	/^        import copy$/;"	i
copy_cmd	generate_namelists.py	/^    copy_cmd = 'cp {0} {1}'.format(paths_to_nl[n]['old'],paths_to_nl[n]['new'])$/;"	v
copy_cmd	old_generate_namelists.py	/^    copy_cmd = 'cp {0} {1}'.format(paths_to_nl[n]['old'],paths_to_nl[n]['new'])$/;"	v
cpus	run_experiments.py	/^                            cpus=24,$/;"	v
create_bmap	extract_fields.py	/^def create_bmap():$/;"	f
create_new_grid	test_crps.py	/^from evac.utils.reproject_tools import reproject, WRF_native_grid, create_new_grid, VerifGrid$/;"	i
create_newgrid	test_crps.py	/^def create_newgrid(DF):$/;"	f
crpsfpath	test_crps.py	/^crpsfpath = os.path.join(outdir,'crps_data.txt')$/;"	v
cu_physics	old_generate_namelists.py	/^cu_physics = None$/;"	v
d01	generate_namelists.py	/^        d01 = 221$/;"	v
d01	generate_namelists.py	/^        d01 = 250$/;"	v
d01	generate_namelists.py	/^        d01 = 251$/;"	v
d01_fname	extract_fields.py	/^        d01_fname = get_wrfout_name(initutc,1)$/;"	v
d01_fpath	extract_fields.py	/^        d01_fpath = os.path.join(m01dir,do1_fname)$/;"	v
d01_lats	extract_fields.py	/^        d01_lats = N.load(do1_latf)$/;"	v
d01_lats	extract_fields.py	/^        d01_lats = d01_nc.variables['XLAT'][:]$/;"	v
d01_limdict	ensemble_verification.py	/^d01_limdict = E.get_limits(dom=1)$/;"	v
d01_limdict	test_verif.py	/^d01_limdict = E.get_limits(dom=1)$/;"	v
d01_lons	extract_fields.py	/^        d01_lons = N.load(d01_lonf)$/;"	v
d01_lons	extract_fields.py	/^        d01_lons = d01_nc.variables['XLON'][:]$/;"	v
d01_nc	extract_fields.py	/^        d01_nc = Dataset(d01_fname)$/;"	v
d01_nc_fpath	extract_fields.py	/^    d01_nc_fpath = os.path.join(memdir,fname)$/;"	v
d02	generate_namelists.py	/^        d02 = 322$/;"	v
d02_fname	extract_fields.py	/^        d02_fname = get_wrfout_name(initutc,2)$/;"	v
d02_fpath	extract_fields.py	/^        d02_fpath = os.path.join(m01dir,do2_fname)$/;"	v
d02_lats	extract_fields.py	/^        d02_lats = N.load(do2_latf)$/;"	v
d02_lats	extract_fields.py	/^        d02_lats = d02_nc.variables['XLAT'][:]$/;"	v
d02_limdict	ensemble_verification.py	/^d02_limdict = E.get_limits(dom=2)$/;"	v
d02_limdict	test_verif.py	/^d02_limdict = E.get_limits(dom=2)$/;"	v
d02_lons	extract_fields.py	/^        d02_lons = N.load(d02_lonf)$/;"	v
d02_lons	extract_fields.py	/^        d02_lons = d02_nc.variables['XLON'][:]$/;"	v
d02_nc	extract_fields.py	/^        d02_nc = Dataset(d01_fname)$/;"	v
d02_nc	extract_fields.py	/^        d02_nc = Dataset(d02_fname)$/;"	v
d02_nc_fpath	extract_fields.py	/^        d02_nc_fpath = os.path.join(memdir,fname)$/;"	v
d02lonf	extract_fields.py	/^    d02lonf = get_extraction_fpaths(initstr=initstr,mem=mem,$/;"	v
data	_test_newruns.py	/^                data = W.get(vrbl=vrbl,utc=utc)[0,lvidx,:,:]$/;"	v
data	test_verif.py	/^                data = E.get('REFL_comp',utc=plotutc,dom=dom,members=memname)[0,0,0,:,:]$/;"	v
datadir	test_crps.py	/^        datadir = os.path.join(dataroot,initdir)$/;"	v
dataroot	ensemble_verification.py	/^dataroot = '\/scratch\/john.lawson\/WRF\/VSE_reso\/20160331'$/;"	v
dataroot	test_crps.py	/^dataroot = '\/scratch\/john.lawson\/WRF\/VSE_reso'$/;"	v
dataroot	test_verif.py	/^dataroot = '\/scratch\/john.lawson\/WRF\/VSE_reso\/test\/test_datadir'$/;"	v
datestr	test_objectid.py	/^        datestr = '20170504',$/;"	v
datetime	_alt_verif_parallel.py	/^import datetime$/;"	i
datetime	_old_verif_parallel.py	/^import datetime$/;"	i
datetime	_test_newruns.py	/^import datetime$/;"	i
datetime	ensemble_verification.py	/^import datetime$/;"	i
datetime	extract_fields.py	/^import datetime$/;"	i
datetime	generate_namelists.py	/^import datetime$/;"	i
datetime	old_verif.py	/^import datetime$/;"	i
datetime	run_experiments.py	/^import datetime$/;"	i
datetime	test_crps.py	/^import datetime$/;"	i
datetime	test_kde.py	/^import datetime$/;"	i
datetime	test_verif.py	/^import datetime$/;"	i
datetime	verif_parallel.py	/^import datetime$/;"	i
debug	generate_namelists.py	/^debug = False # Print more output$/;"	v
debug	old_generate_namelists.py	/^debug = False # Print more output$/;"	v
denormalise	old_generate_namelists.py	/^def denormalise(normvals,xmin,xmax):$/;"	f
do2latf	extract_fields.py	/^    do2latf = get_extraction_fpaths(initstr=initstr,mem=mem,$/;"	v
do_1d	test_kde.py	/^    do_1d = 0$/;"	v
do_2d	test_kde.py	/^    do_2d = 1$/;"	v
do_all	test_objectid.py	/^        do_all = False,$/;"	v
do_extraction	_old_verif_parallel.py	/^do_extraction = True$/;"	v
do_fcst_interp	verif_parallel.py	/^def do_fcst_interp(nc_fpath,vrbl,npyfpaths,newlats,newlons):$/;"	f
do_interp	_alt_verif_parallel.py	/^def do_interp(fmt,old_field,old_lats,old_lons,new_lats,new_lons):$/;"	f
do_kde	_old_verif_parallel.py	/^def do_kde(arr3d):$/;"	f
do_kde	verif_parallel.py	/^def do_kde(arr3d):$/;"	f
do_mrms_interp	verif_parallel.py	/^def do_mrms_interp(nc_fpath,npy_fpath,newlats,newlons,vrbl):$/;"	f
dom_names	extract_fields.py	/^dom_names = ("d01","d02")$/;"	v
dom_names	verif_parallel.py	/^dom_names = ("d01","d02")$/;"	v
doms	_old_verif_parallel.py	/^doms = (1,2)$/;"	v
doms	generate_namelists.py	/^doms = 2 # number of domains$/;"	v
doms	old_generate_namelists.py	/^doms = 2 # number of domains$/;"	v
doms	test_objectid.py	/^        doms = (2,),$/;"	v
dryrun	run_experiments.py	/^            dryrun = False,$/;"	v
dx_to_nxny	extract_fields.py	/^    def dx_to_nxny(self,dx,urcrnrlat,urcrnrlon,llcrnrlat,llcrnrlon):$/;"	m	class:CaseGrid
edit_namelist	generate_namelists.py	/^def edit_namelist(f,sett,newval,enforce_all=False,doms=1,precision=3):$/;"	f
edit_namelist	old_generate_namelists.py	/^def edit_namelist(f,sett,newval,enforce_all=False,doms=1,precision=3):$/;"	f
enddt	generate_namelists.py	/^enddt = initdt + datetime.timedelta(seconds=int(60*60*runlen))$/;"	v
enforce_all	generate_namelists.py	/^enforce_all = NS.donotenforce $/;"	v
enforce_all	old_generate_namelists.py	/^enforce_all = NS.donotenforce $/;"	v
ensdir	old_verif.py	/^        ensdir = os.path.join(ensroot,initdir)$/;"	v
ensnums	generate_namelists.py	/^ensnums = range(1,nens+1) # names of each ensemble$/;"	v
ensnums	old_generate_namelists.py	/^ensnums = range(1,nens+1) # names of each ensemble$/;"	v
enspath	test_kde.py	/^enspath = os.path.join(ensroot,initstr)$/;"	v
ensroot	_alt_verif_parallel.py	/^ensroot = '\/scratch\/john.lawson\/WRF\/VSE_reso\/{}'.format(key_wrf)$/;"	v
ensroot	_old_verif_parallel.py	/^ensroot = '\/scratch\/john.lawson\/WRF\/VSE_reso\/{}'.format(key_wrf)$/;"	v
ensroot	extract_fields.py	/^ensroot = '\/scratch\/john.lawson\/WRF\/VSE_reso\/{}'.format(key_wrf)$/;"	v
ensroot	old_verif.py	/^ensroot = '\/scratch\/john.lawson\/WRF\/VSE_reso'$/;"	v
ensroot	test_kde.py	/^ensroot = '\/scratch\/john.lawson\/WRF\/VSE_reso\/ensembledata'$/;"	v
ensroot	verif_parallel.py	/^ensroot = '\/scratch\/john.lawson\/WRF\/VSE_reso\/{}'.format(key_wrf)$/;"	v
evac	_alt_verif_parallel.py	/^import evac.utils as utils$/;"	i
evac	_old_verif_parallel.py	/^import evac.utils as utils$/;"	i
evac	_test_newruns.py	/^import evac.utils.utils as utils$/;"	i
evac	ensemble_verification.py	/^import evac.utils as utils$/;"	i
evac	extract_fields.py	/^import evac.utils as utils$/;"	i
evac	old_verif.py	/^import evac.utils as utils$/;"	i
evac	run_experiments.py	/^import evac.utils.utils as utils$/;"	i
evac	test_crps.py	/^import evac.utils as utils$/;"	i
evac	test_kde.py	/^import evac.utils.utils as utils$/;"	i
evac	test_verif.py	/^import evac.utils as utils$/;"	i
evac	verif_parallel.py	/^import evac.utils as utils$/;"	i
experiment	old_generate_namelists.py	/^        experiment = "MP"$/;"	v
experiment	old_generate_namelists.py	/^        experiment = "MP-Stoch"$/;"	v
experiment	old_generate_namelists.py	/^        experiment = "SP"$/;"	v
experiment	old_generate_namelists.py	/^        experiment = "SP-Stoch"$/;"	v
experiments	old_generate_namelists.py	/^experiments = NL.keys()$/;"	v
extract_fields	verif_parallel.py	/^def extract_fields():$/;"	f
fcst	test_kde.py	/^        fcst = fcst_all[:,0,0,:,:]$/;"	v
fcst	test_kde.py	/^    fcst = fcst_all[:,0,0,:,:]$/;"	v
fcst	test_kde.py	/^fcst = N.swapaxes(fcst,1,0)$/;"	v
fcst	test_kde.py	/^fcst = fcst_all[:,0,0,:,:].reshape(nmems,nflat)$/;"	v
fcst1D	test_kde.py	/^            fcst1D = fcst[:,i,j]$/;"	v
fcst1D	test_kde.py	/^    fcst1D = fcst[3556,:]$/;"	v
fcst1Da	test_kde.py	/^    fcst1Da = N.hstack((fcst1D,N.array([0.0,0.0,0.0])))$/;"	v
fcst_all	test_kde.py	/^    fcst_all = fcst_all - 273.15$/;"	v
fcst_all	test_kde.py	/^fcst_all = E.get(fcsthr=fhr,vrbl=vrbl,dom=1)$/;"	v
fcst_nt	test_objectid.py	/^        fcst_nt = int(180\/5) + 1,$/;"	v
fcst_pp	test_kde.py	/^        fcst_pp = N.empty([nlat,nlon])$/;"	v
fcst_pp	test_kde.py	/^    fcst_pp = N.empty([nlat,nlon])$/;"	v
fcstmins	_alt_verif_parallel.py	/^fcstmins = N.arange(0,185,5)$/;"	v
fcstmins	_old_verif_parallel.py	/^fcstmins = N.arange(0,185,5)$/;"	v
fcstmins	_test_newruns.py	/^fcstmins = range(30,210,30)$/;"	v
fcstmins	extract_fields.py	/^fcstmins = N.arange(0,185,5)$/;"	v
fcstmins	verif_parallel.py	/^fcstmins = N.arange(0,185,5)$/;"	v
fctimes	old_verif.py	/^fctimes = list(range(1,4))$/;"	v
fhr	test_kde.py	/^fhr = 1$/;"	v
fhrs	ensemble_verification.py	/^fhrs = [0.25,] + list(range(1,3))$/;"	v
fhrs	test_verif.py	/^fhrs = [0.25,] + list(range(1,3))$/;"	v
fhstr	test_verif.py	/^        fhstr = utils.pretty_fhr(fhr)$/;"	v
fname	_test_newruns.py	/^                fname = 'wrfout_{}_2017-05-03_02:00:00'.format(dom)$/;"	v
fname	_test_newruns.py	/^        fname = "NCOruns_{:03d}min_{}_{}.png".format(fcstmin,vrbl,dom)$/;"	v
fname	extract_fields.py	/^        fname = utils.string_from_time('mrms',initutc,dom="d01")$/;"	v
fname	extract_fields.py	/^        fname = utils.string_from_time('wrfout',initutc,dom="d02")$/;"	v
fname	extract_fields.py	/^    fname = utils.string_from_time('wrfout',initutc,dom="d01")$/;"	v
fname	test_kde.py	/^                fname = 'test_kde_sm_{}_bwfc{}.png'.format(plottype,bwfc)$/;"	v
fname	test_kde.py	/^        fname = 'test_kde2d_sm.png'$/;"	v
fname	test_kde.py	/^    fname = 'test_kde2d_scipy.png'$/;"	v
fname	test_kde.py	/^    fname = 'test_kde_scipy.png'$/;"	v
fname	test_verif.py	/^        fname = "test_verif_d{:02d}_{}_{}".format(dom,opt,fhstr)$/;"	v
fname0	test_kde.py	/^    fname0 = 'test_kde_seaborn0.png'$/;"	v
fname1	test_kde.py	/^    fname1 = 'test_kde_seaborn1.png'$/;"	v
fname2	test_kde.py	/^    fname2 = 'test_kde_seaborn2.png'$/;"	v
fname3	test_kde.py	/^    fname3 = 'test_kde_seaborn3.png'$/;"	v
fpath	_test_newruns.py	/^                fpath = os.path.join(folder,mem,fname)$/;"	v
fpath	_test_newruns.py	/^        fpath = os.path.join(outdir,fname)$/;"	v
fpath	test_kde.py	/^                fpath = os.path.join(outroot,'kde',fname)$/;"	v
fpath	test_kde.py	/^        fpath = os.path.join(outroot,'kde',fname)$/;"	v
fpath	test_kde.py	/^    fpath = os.path.join(outroot,fname)$/;"	v
fpath0	test_kde.py	/^    fpath0 = os.path.join(outroot,fname0)$/;"	v
fpath1	test_kde.py	/^    fpath1 = os.path.join(outroot,fname1)$/;"	v
fpath2	test_kde.py	/^    fpath2 = os.path.join(outroot,fname2)$/;"	v
fpath3	test_kde.py	/^    fpath3 = os.path.join(outroot,fname3)$/;"	v
fss	_old_verif_parallel.py	/^def fss(fss_itr):$/;"	f
fss	verif_parallel.py	/^def fss(fss_itr):$/;"	f
fss_itr	_old_verif_parallel.py	/^    fss_itr = generate_iterable(fss=True)$/;"	v
fss_itr	verif_parallel.py	/^    fss_itr = generate_iterable(fss=True)$/;"	v
ftime	test_crps.py	/^            ftime = itime + datetime.timedelta(seconds=3600)$/;"	v
gaussian_kde	_alt_verif_parallel.py	/^from scipy.stats import gaussian_kde$/;"	i
gaussian_kde	_old_verif_parallel.py	/^from scipy.stats import gaussian_kde$/;"	i
gaussian_kde	extract_fields.py	/^from scipy.stats import gaussian_kde$/;"	i
gaussian_kde	test_kde.py	/^from scipy.stats import gaussian_kde$/;"	i
gaussian_kde	verif_parallel.py	/^from scipy.stats import gaussian_kde$/;"	i
generate_LHS_draw	old_generate_namelists.py	/^def generate_LHS_draw(seed):$/;"	f
generate_all_folders	extract_fields.py	/^def generate_all_folders():$/;"	f
generate_all_folders	verif_parallel.py	/^def generate_all_folders():$/;"	f
generate_all_runs	extract_fields.py	/^def generate_all_runs():$/;"	f
generate_all_runs	verif_parallel.py	/^def generate_all_runs():$/;"	f
generate_fname	_old_verif_parallel.py	/^def generate_fname(vrbl=None,metric=None,level=None,fcstmin=None,dom_pp=None,$/;"	f
generate_fname	verif_parallel.py	/^def generate_fname(vrbl=None,metric=None,level=None,fcstmin=None,dom_pp=None,$/;"	f
generate_iterable	_old_verif_parallel.py	/^def generate_iterable(fss=False):$/;"	f
generate_iterable	verif_parallel.py	/^def generate_iterable(fss=False):$/;"	f
generate_run_check	_old_verif_parallel.py	/^def generate_run_check():#initutcs,doms,member_names):$/;"	f
generate_seeds	old_generate_namelists.py	/^def generate_seeds(num):$/;"	f
get_all_initutcs	_old_verif_parallel.py	/^def get_all_initutcs():$/;"	f
get_all_initutcs	extract_fields.py	/^def get_all_initutcs():$/;"	f
get_all_initutcs	verif_parallel.py	/^def get_all_initutcs():$/;"	f
get_bw	_old_verif_parallel.py	/^def get_bw(arr,factor=1\/5,remove_std=False):$/;"	f
get_bw	test_kde.py	/^def get_bw(arr,factor=1\/5,remove_std=False):$/;"	f
get_bw	verif_parallel.py	/^def get_bw(arr,factor=1\/5,remove_std=False):$/;"	f
get_dom_int	_old_verif_parallel.py	/^def get_dom_int(dom_pp):$/;"	f
get_dom_int	verif_parallel.py	/^def get_dom_int(dom_pp):$/;"	f
get_extraction_fpaths	verif_parallel.py	/^def get_extraction_fpaths(initstr,mem,vrbl,fmt,nt=37):$/;"	f
get_fcst_extraction_fpaths	extract_fields.py	/^def get_fcst_extraction_fpaths(initstr,mem,vrbl,fmt,nt=37):$/;"	f
get_llf_fpath	extract_fields.py	/^def get_llf_fpath(casestr,key):$/;"	f
get_mrms_extraction_fpath	extract_fields.py	/^def get_mrms_extraction_fpath(initstr,validutc,vrbl,fmt):$/;"	f
get_mrms_extraction_fpath	verif_parallel.py	/^def get_mrms_extraction_fpath(initstr,validutc,vrbl,fmt):$/;"	f
get_mrms_rotdz_grid	extract_fields.py	/^def get_mrms_rotdz_grid(caseutc,vrbl):$/;"	f
get_prob	_old_verif_parallel.py	/^    def get_prob(itr,method=2):$/;"	f	function:do_kde
get_prob	test_kde.py	/^        def get_prob(itr,method=2):$/;"	f
get_prob	verif_parallel.py	/^    def get_prob(itr,method=2):$/;"	f	function:do_kde
get_valid_time	_old_verif_parallel.py	/^def get_valid_time(initutc,fcstmin=None,fchr=None):$/;"	f
get_valid_time	verif_parallel.py	/^def get_valid_time(initutc,fcstmin=None,fchr=None):$/;"	f
get_wrfout_fname	extract_fields.py	/^def get_wrfout_fname(utc,dom):$/;"	f
glob	generate_namelists.py	/^import glob$/;"	i
glob	old_generate_namelists.py	/^import glob$/;"	i
griddata	test_crps.py	/^from scipy.interpolate import griddata$/;"	i
grids	_alt_verif_parallel.py	/^grids = ['d01_cut_3km','d01_interp_5km',$/;"	v
grids	_old_verif_parallel.py	/^grids = ['d01_cut_3km','d01_interp_5km',$/;"	v
grids	verif_parallel.py	/^grids = ['d01_3km','d01_5km',$/;"	v
history_outname	generate_namelists.py	/^history_outname = False # Change this to absolute path of output file and location$/;"	v
history_outname	old_generate_namelists.py	/^history_outname = False # Change this to absolute path of output file and location$/;"	v
icbc_cmd	run_experiments.py	/^        icbc_cmd = 'copy'  $/;"	v
icdict	run_experiments.py	/^        icdict = {}$/;"	v
ics	run_experiments.py	/^            ics = icdict,$/;"	v
idx	test_kde.py	/^                idx = utils.closest(x,thresh)$/;"	v
ii	generate_namelists.py	/^        ii = 61$/;"	v
iii	_old_verif_parallel.py	/^        iii = generate_run_check()$/;"	v
iii	verif_parallel.py	/^        iii = generate_run_check()$/;"	v
init_dict	old_verif.py	/^init_dict = {}$/;"	v
init_kwargs	run_experiments.py	/^        init_kwargs = dict($/;"	v
initdir	old_verif.py	/^        initdir = utils.string_from_time('dir',initutc,strlen='hour')$/;"	v
initdir	test_crps.py	/^        initdir = utils.string_from_time('dir',initutc,strlen='hour')$/;"	v
initdt	generate_namelists.py	/^initdt = datetime.datetime.strptime(initstr,"%Y%m%d%H")$/;"	v
initstr	extract_fields.py	/^    initstr = utils.string_from_time('dir',initutc,strlen='hour')$/;"	v
initstr	generate_namelists.py	/^initstr = str(NS.initstr)$/;"	v
initstr	run_experiments.py	/^        initstr = utils.string_from_time('dir',initutc,strlen='hour')$/;"	v
initstr	test_crps.py	/^        initstr = utils.string_from_time('title',initutc,)$/;"	v
initstr	test_kde.py	/^initstr = '2016033120'$/;"	v
initutc	ensemble_verification.py	/^initutc = datetime.datetime(2016,3,31,21,0,0)$/;"	v
initutc	run_experiments.py	/^            initutc = initutc,$/;"	v
initutc	test_kde.py	/^initutc = datetime.datetime(2016,3,31,20,0,0)$/;"	v
initutc	test_verif.py	/^initutc = datetime.datetime(2016,3,31,21,0,0)$/;"	v
initutcs	_old_verif_parallel.py	/^initutcs = get_all_initutcs()$/;"	v
initutcs	extract_fields.py	/^initutcs = get_all_initutcs()$/;"	v
initutcs	test_crps.py	/^initutcs = [datetime.datetime(2016,3,31,x,0,0) for x in (19,20,21,22)]$/;"	v
initutcs	verif_parallel.py	/^initutcs = get_all_initutcs()$/;"	v
interp_method	test_crps.py	/^interp_method = 'linear'$/;"	v
interpolate	extract_fields.py	/^def interpolate(dataA,latsA,lonsA,latsB,lonsB,$/;"	f
itertools	_alt_verif_parallel.py	/^import itertools$/;"	i
itertools	_old_verif_parallel.py	/^import itertools$/;"	i
itertools	_test_newruns.py	/^import itertools$/;"	i
itertools	extract_fields.py	/^import itertools$/;"	i
itertools	generate_namelists.py	/^import itertools$/;"	i
itertools	old_generate_namelists.py	/^import itertools$/;"	i
itertools	verif_parallel.py	/^import itertools$/;"	i
itimes	test_crps.py	/^        itimes = [initutc + datetime.timedelta(seconds=3600*n) for n in range(3)]$/;"	v
itr	_old_verif_parallel.py	/^    itr = generate_iterable()$/;"	v
itr	_old_verif_parallel.py	/^    itr = list(generate_iterable())$/;"	v
itr	test_kde.py	/^        itr = itr_fcst(fcst=fcst,nlat=nlat,nlon=nlon)$/;"	v
itr	verif_parallel.py	/^    itr = generate_iterable()$/;"	v
itr	verif_parallel.py	/^    itr = list(generate_iterable())$/;"	v
itr_fcst	_old_verif_parallel.py	/^    def itr_fcst(fcst,nlat,nlon):$/;"	f	function:do_kde
itr_fcst	test_kde.py	/^        def itr_fcst(fcst,nlat,nlon):$/;"	f
itr_fcst	verif_parallel.py	/^    def itr_fcst(fcst,nlat,nlon):$/;"	f	function:do_kde
jj	generate_namelists.py	/^        jj = 61$/;"	v
kde	test_kde.py	/^                kde = gaussian_kde(dataset=fcst1D,bw_method=bw)$/;"	v
kde	test_kde.py	/^            kde = smapi.nonparametric.KDEUnivariate(fcst1Da)$/;"	v
kde	test_kde.py	/^    kde = gaussian_kde(dataset=fcst1D,bw_method=bw)$/;"	v
kdepc	test_kde.py	/^                kdepc = (1-kde.cdf[idx])*100$/;"	v
kdepc	test_kde.py	/^    kdepc = (kde.integrate_box_1d(thresh,xmax))*100$/;"	v
key	generate_namelists.py	/^    key = NS.key$/;"	v
key	old_generate_namelists.py	/^    key = NS.key$/;"	v
key	run_experiments.py	/^key = 'ForReal_nco'$/;"	v
key_plot	_alt_verif_parallel.py	/^key_plot = 'Xmas'$/;"	v
key_plot	_old_verif_parallel.py	/^key_plot = 'Xmas'$/;"	v
key_plot	extract_fields.py	/^key_plot = 'Xmas'$/;"	v
key_plot	verif_parallel.py	/^key_plot = 'Xmas'$/;"	v
key_pp	_alt_verif_parallel.py	/^key_pp = 'Xmas'$/;"	v
key_pp	_old_verif_parallel.py	/^key_pp = 'Xmas'$/;"	v
key_pp	extract_fields.py	/^key_pp = 'Xmas'$/;"	v
key_pp	verif_parallel.py	/^key_pp = 'Xmas'$/;"	v
key_scores	_alt_verif_parallel.py	/^key_scores = 'Xmas'$/;"	v
key_scores	_old_verif_parallel.py	/^key_scores = 'Xmas'$/;"	v
key_scores	extract_fields.py	/^key_scores = 'Xmas'$/;"	v
key_scores	verif_parallel.py	/^key_scores = 'Xmas'$/;"	v
key_wrf	_alt_verif_parallel.py	/^key_wrf = 'ForReal_nco'$/;"	v
key_wrf	_old_verif_parallel.py	/^key_wrf = 'ForReal_nco'$/;"	v
key_wrf	extract_fields.py	/^key_wrf = 'ForReal_nco'$/;"	v
key_wrf	verif_parallel.py	/^key_wrf = 'ForReal_nco'$/;"	v
kwargs	test_objectid.py	/^kwargs = dict($/;"	v
lbcdict	run_experiments.py	/^        lbcdict = {}$/;"	v
lbcs	run_experiments.py	/^            lbcs = lbcdict,$/;"	v
ld	test_verif.py	/^            ld = d02_limdict$/;"	v
ld	test_verif.py	/^            ld = {}$/;"	v
levels	test_kde.py	/^        levels = N.arange(2,102,2)$/;"	v
levels	test_kde.py	/^    levels = N.arange(5,105,5)$/;"	v
load_data	extract_fields.py	/^def load_data(nc_fpath,vrbl,npyfpaths):$/;"	f
load_data	verif_parallel.py	/^def load_data(nc_fpath,vrbl,npyfpaths):$/;"	f
load_ens_switch	old_verif.py	/^load_ens_switch = max(compute_crps,compute_detscores,plot_thumbs,$/;"	v
load_mrms	extract_fields.py	/^def load_mrms(utc,vrbl):$/;"	f
logging	_old_verif_parallel.py	/^import logging$/;"	i
logging	extract_fields.py	/^import logging$/;"	i
logging	verif_parallel.py	/^import logging$/;"	i
lookup_mrms_metadata	extract_fields.py	/^def lookup_mrms_metadata(caseutc,vrbl):$/;"	f
loop_through_domains	test_crps.py	/^def loop_through_domains(E,itime,ftime,initstr=None,doms='auto'):$/;"	f
lvidx	_test_newruns.py	/^                    lvidx = 20$/;"	v
lvidx	_test_newruns.py	/^                lvidx = 0$/;"	v
lvs	_test_newruns.py	/^                    lvs = N.arange(2.5,22.5,2.5)$/;"	v
lvs	_test_newruns.py	/^                    lvs = S.clvs$/;"	v
m01dir	extract_fields.py	/^    m01dir = os.path.join(ensroot,initstr,"m01")$/;"	v
math	test_kde.py	/^import math$/;"	i
matplotlib	_alt_verif_parallel.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	_old_verif_parallel.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	_test_newruns.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	ensemble_verification.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	extract_fields.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	test_crps.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	test_kde.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	test_verif.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	verif_parallel.py	/^import matplotlib.pyplot as plt$/;"	i
member_names	_old_verif_parallel.py	/^member_names = ['m{:02d}'.format(n) for n in range(1,37)]$/;"	v
member_names	extract_fields.py	/^member_names = ['m{:02d}'.format(n) for n in range(1,37)]$/;"	v
member_names	verif_parallel.py	/^member_names = ['m{:02d}'.format(n) for n in range(1,37)]$/;"	v
membernames	run_experiments.py	/^            membernames = membernames,$/;"	v
membernames	run_experiments.py	/^        membernames = ['m{:02d}'.format(n) for n in range(1,nmems+1)]$/;"	v
memdir	extract_fields.py	/^        memdir = os.path.join(ensroot,initstr,mem)$/;"	v
memname	test_verif.py	/^                memname = 'm{:02d}'.format(plot)$/;"	v
memnos	run_experiments.py	/^        memnos = N.arange(1,nmems+1)$/;"	v
merge_lbcs	run_experiments.py	/^                            merge_lbcs=True,$/;"	v
mp_log	_old_verif_parallel.py	/^mp_log = multiprocessing.log_to_stderr()$/;"	v
mp_log	verif_parallel.py	/^mp_log = multiprocessing.log_to_stderr()$/;"	v
mrms_fpath	extract_fields.py	/^        mrms_fpath = get_mrms_rotdz_fpath(caseutc)$/;"	v
mrms_rotdz_lats	extract_fields.py	/^        mrms_rotdz_lats = N.load(mrms_rotdz_latf)$/;"	v
mrms_rotdz_lons	extract_fields.py	/^        mrms_rotdz_lons = N.load(mrms_rotdz_lonf)$/;"	v
mrms_rotdz_nc	extract_fields.py	/^        mrms_rotdz_nc = Dataset(mrms_fpath)$/;"	v
mrmsdir	_alt_verif_parallel.py	/^mrmsdir = 'work\/john.lawson\/MRMS_data\/VSE_reso'$/;"	v
mrmsdir	_old_verif_parallel.py	/^mrmsdir = 'work\/john.lawson\/MRMS_data\/VSE_reso'$/;"	v
mrmsdir	extract_fields.py	/^mrmsdir = 'work\/john.lawson\/MRMS_data\/rot-dz'$/;"	v
mrmsdir	test_objectid.py	/^        mrmsdir = '\/work1\/skinnerp\/MRMS_verif\/mrms_cressman\/20170504',$/;"	v
mrmsdir	verif_parallel.py	/^mrmsdir = 'work\/john.lawson\/MRMS_data\/VSE_reso'$/;"	v
multiprocessing	_alt_verif_parallel.py	/^import multiprocessing$/;"	i
multiprocessing	_old_verif_parallel.py	/^import multiprocessing$/;"	i
multiprocessing	extract_fields.py	/^import multiprocessing$/;"	i
multiprocessing	verif_parallel.py	/^import multiprocessing$/;"	i
namelistdir	run_experiments.py	/^        namelistdir = PosixPath('\/home\/john.lawson\/VSE_reso\/pycode\/namelists\/{}\/{}'.format(key,casestr))$/;"	v
namelists	generate_namelists.py	/^namelists = ['namelist.input.{0}'.format(n) for n in ensnums]$/;"	v
namelists	old_generate_namelists.py	/^namelists = ['namelist.input.{0}'.format(n) for n in ensnums]$/;"	v
nc_fpath	extract_fields.py	/^        nc_fpath = os.path.join(memdir,FOLDER,fname)$/;"	v
ncno	_test_newruns.py	/^                ncno = " ncrcat"$/;"	v
ncno	_test_newruns.py	/^                ncno = 3$/;"	v
ncno	_test_newruns.py	/^                ncno = 4$/;"	v
ncpus	_old_verif_parallel.py	/^ncpus = parser.parse_args().ncpus$/;"	v
ncpus	old_verif.py	/^ncpus = 1$/;"	v
ncpus	test_objectid.py	/^        ncpus = 30,$/;"	v
ncpus	verif_parallel.py	/^ncpus = parser.parse_args().ncpus$/;"	v
ndoms	run_experiments.py	/^            ndoms = 2,$/;"	v
ne	test_objectid.py	/^        ne = 36,$/;"	v
nens	generate_namelists.py	/^nens = int(NS.nmems) # Number of ensemble members$/;"	v
nens	old_generate_namelists.py	/^nens = 18 # Number of ensemble members$/;"	v
netCDF4	_alt_verif_parallel.py	/^import netCDF4$/;"	i
netCDF4	_old_verif_parallel.py	/^import netCDF4$/;"	i
netCDF4	extract_fields.py	/^import netCDF4$/;"	i
netCDF4	verif_parallel.py	/^import netCDF4$/;"	i
new_nl_path	run_experiments.py	/^        new_nl_path = namelistdir \/ 'namelist.input.template'$/;"	v
newse_mems	run_experiments.py	/^        newse_mems =  ['mem{}'.format(n) for n in range(1,nmems+1)]$/;"	v
nflat	test_kde.py	/^nflat = nlat*nlon$/;"	v
nidxs	generate_namelists.py	/^nidxs = range(nens) # indices of each ensemble$/;"	v
nidxs	old_generate_namelists.py	/^nidxs = range(nens) # indices of each ensemble$/;"	v
nl_per_member	run_experiments.py	/^            nl_per_member = 'dot_number',$/;"	v
nmems	run_experiments.py	/^        nmems = 36$/;"	v
nmems	test_kde.py	/^                nmems = fcst1Da.size$/;"	v
nodes	run_experiments.py	/^                            nodes=1,$/;"	v
npydir	old_verif.py	/^        npydir = os.path.join(npyroot,initdir)$/;"	v
npyf	extract_fields.py	/^                npyf = get_extraction_fpaths(initstr=initstr,mem=mem,$/;"	v
npyf	extract_fields.py	/^            npyf = get_mrms_extraction_fpath(initstr,utc,vrbl,fmt)$/;"	v
npyfs	extract_fields.py	/^            npyfs = get_extraction_fpaths(initstr=initstr,mem=mem,$/;"	v
npyfs	extract_fields.py	/^        npyfs = get_extraction_fpaths(initstr=initstr,mem=mem,$/;"	v
npyroot	_alt_verif_parallel.py	/^npyroot = '\/work\/john.lawson\/VSE_reso\/scores\/{}'.format(key_scores)$/;"	v
npyroot	_old_verif_parallel.py	/^npyroot = '\/work\/john.lawson\/VSE_reso\/scores\/{}'.format(key_scores)$/;"	v
npyroot	old_verif.py	/^npyroot = '\/work\/john.lawson\/VSE_reso\/scores'$/;"	v
npyroot	verif_parallel.py	/^npyroot = '\/work\/john.lawson\/VSE_reso\/scores\/{}'.format(key_scores)$/;"	v
nx	test_crps.py	/^nx = 50$/;"	v
ny	test_crps.py	/^ny = 50$/;"	v
oID	test_objectid.py	/^oID = ObjectID(**kwargs)$/;"	v
objdir	test_objectid.py	/^        objdir = os.path.join(rootdir,'objectfiles'),$/;"	v
og_nl_path	run_experiments.py	/^        og_nl_path = wofdir \/ 'mem1' \/ 'namelist.input'$/;"	v
onlydo	generate_namelists.py	/^onlydo = NS.onlydo $/;"	v
onlydo	old_generate_namelists.py	/^onlydo = NS.onlydo $/;"	v
open_random_rotdz	extract_fields.py	/^def open_random_rotdz(caseutc,vrbl):$/;"	f
opt	test_verif.py	/^            opt = "large"$/;"	v
opt	test_verif.py	/^            opt = "small"$/;"	v
os	_alt_verif_parallel.py	/^import os$/;"	i
os	_old_verif_parallel.py	/^import os$/;"	i
os	_test_newruns.py	/^import os$/;"	i
os	ensemble_verification.py	/^import os$/;"	i
os	extract_fields.py	/^import os$/;"	i
os	generate_namelists.py	/^import os$/;"	i
os	move_around_files.py	/^import os$/;"	i
os	old_generate_namelists.py	/^import os$/;"	i
os	old_verif.py	/^import os$/;"	i
os	run_experiments.py	/^import os$/;"	i
os	test_crps.py	/^import os$/;"	i
os	test_kde.py	/^import os$/;"	i
os	test_objectid.py	/^import os$/;"	i
os	test_verif.py	/^import os$/;"	i
os	verif_parallel.py	/^import os$/;"	i
otherdir	run_experiments.py	/^        otherdir = PosixPath('\/home\/john.lawson\/VSE_reso\/otherfiles')$/;"	v
outdir	_test_newruns.py	/^outdir = '\/home\/john.lawson\/VSE_reso\/pyoutput\/tests'$/;"	v
outdir	ensemble_verification.py	/^outdir = '\/home\/john.lawson\/VSE_reso\/pyoutput\/attempt1'$/;"	v
outdir	generate_namelists.py	/^outdir = os.path.join(os.path.dirname(os.path.abspath(__file__)),'namelists',key,str(NS.casestr))$/;"	v
outdir	old_generate_namelists.py	/^outdir = os.path.join(os.path.dirname(os.path.abspath(__file__)),'namelists',key,str(NS.casestr))$/;"	v
outdir	old_verif.py	/^                outdir=os.path.join(outdir,'detscores'),score=score,$/;"	v
outdir	old_verif.py	/^        outdir = os.path.join(outroot,casestr,initdir)$/;"	v
outdir	test_crps.py	/^                                outdir=outdir,)$/;"	v
outdir	test_crps.py	/^outdir = '\/home\/john.lawson\/VSE_reso\/pyoutput'$/;"	v
outdir	test_verif.py	/^outdir = '\/home\/john.lawson\/VSE_reso\/pyoutput\/test2'$/;"	v
outfpath	test_verif.py	/^        outfpath = os.path.join(outdir,fname)$/;"	v
outroot	_alt_verif_parallel.py	/^outroot = '\/home\/john.lawson\/VSE_reso\/pyoutput\/{}'.format(key_plot)$/;"	v
outroot	_old_verif_parallel.py	/^outroot = '\/home\/john.lawson\/VSE_reso\/pyoutput\/{}'.format(key_plot)$/;"	v
outroot	old_verif.py	/^outroot = '\/home\/john.lawson\/VSE_reso\/pyoutput'$/;"	v
outroot	test_kde.py	/^outroot = '\/home\/john.lawson\/VSE_reso\/pyoutput\/'$/;"	v
outroot	verif_parallel.py	/^outroot = '\/home\/john.lawson\/VSE_reso\/pyoutput\/{}'.format(key_plot)$/;"	v
overwrite	old_verif.py	/^                            overwrite=False)$/;"	v
overwrite_extraction	_old_verif_parallel.py	/^overwrite_extraction = parser.parse_args().overwrite_extraction$/;"	v
overwrite_output	_old_verif_parallel.py	/^overwrite_output = parser.parse_args().overwrite_output$/;"	v
overwrite_output	verif_parallel.py	/^overwrite_output = parser.parse_args().overwrite_output$/;"	v
overwrite_scores	_old_verif_parallel.py	/^overwrite_scores = parser.parse_args().overwrite_scores$/;"	v
overwrite_scores	verif_parallel.py	/^overwrite_scores = parser.parse_args().overwrite_scores$/;"	v
parser	_old_verif_parallel.py	/^parser = argparse.ArgumentParser()$/;"	v
parser	generate_namelists.py	/^parser = argparse.ArgumentParser()$/;"	v
parser	old_generate_namelists.py	/^parser = argparse.ArgumentParser()$/;"	v
parser	verif_parallel.py	/^parser = argparse.ArgumentParser()$/;"	v
path_to_batch	run_experiments.py	/^            path_to_batch = otherdir\/'run_wrf.job',$/;"	v
path_to_datadir	run_experiments.py	/^            path_to_datadir = rundir,$/;"	v
path_to_exedir	run_experiments.py	/^            path_to_exedir = wrfdir ,$/;"	v
path_to_ic	run_experiments.py	/^            path_to_ic = wofdir \/ 'WRFOUT' \/ wrfout_needed$/;"	v
path_to_icdir	run_experiments.py	/^            path_to_icdir = False,$/;"	v
path_to_lbcdir	run_experiments.py	/^            path_to_lbcdir = False,$/;"	v
path_to_namelist_template	generate_namelists.py	/^path_to_namelist_template = '\/home\/john.lawson\/VSE_reso\/pycode\/namelists\/{}\/{}\/namelist.input.template'.format($/;"	v
path_to_namelist_template	old_generate_namelists.py	/^path_to_namelist_template = '\/home\/john.lawson\/VSE_reso\/pycode\/namelists\/{}\/{}\/namelist.input.template'.format($/;"	v
path_to_namelistdir	run_experiments.py	/^            path_to_namelistdir = namelistdir,$/;"	v
path_to_newinput	run_experiments.py	/^            path_to_newinput = rundir \/ mem \/ 'wrfinput_d01'$/;"	v
path_to_outdir	run_experiments.py	/^            path_to_outdir = rootdir\/'outdir',$/;"	v
paths_to_nl	generate_namelists.py	/^paths_to_nl = {}$/;"	v
paths_to_nl	old_generate_namelists.py	/^paths_to_nl = {}$/;"	v
pdb	_alt_verif_parallel.py	/^import pdb$/;"	i
pdb	_old_verif_parallel.py	/^import pdb$/;"	i
pdb	_test_newruns.py	/^import pdb$/;"	i
pdb	ensemble_verification.py	/^import pdb$/;"	i
pdb	extract_fields.py	/^import pdb$/;"	i
pdb	generate_namelists.py	/^import pdb$/;"	i
pdb	move_around_files.py	/^import pdb$/;"	i
pdb	old_generate_namelists.py	/^import pdb$/;"	i
pdb	old_verif.py	/^import pdb$/;"	i
pdb	run_experiments.py	/^import pdb$/;"	i
pdb	test_crps.py	/^import pdb$/;"	i
pdb	test_kde.py	/^import pdb$/;"	i
pdb	test_objectid.py	/^import pdb$/;"	i
pdb	test_verif.py	/^import pdb$/;"	i
pdb	verif_parallel.py	/^import pdb$/;"	i
pickle	_alt_verif_parallel.py	/^import pickle $/;"	i
pickle	_old_verif_parallel.py	/^import pickle $/;"	i
pickle	extract_fields.py	/^import pickle $/;"	i
pickle	verif_parallel.py	/^import pickle $/;"	i
plot	_old_verif_parallel.py	/^def plot(itr):$/;"	f
plot	verif_parallel.py	/^def plot(itr):$/;"	f
plot_brier	_old_verif_parallel.py	/^plot_brier = 0$/;"	v
plot_brier	verif_parallel.py	/^plot_brier = 0$/;"	v
plot_casati	_old_verif_parallel.py	/^plot_casati = 0$/;"	v
plot_casati	verif_parallel.py	/^plot_casati = 0$/;"	v
plot_crps	_old_verif_parallel.py	/^plot_crps = 0$/;"	v
plot_crps	old_verif.py	/^plot_crps = 0$/;"	v
plot_crps	verif_parallel.py	/^plot_crps = 0$/;"	v
plot_detscores	_old_verif_parallel.py	/^plot_detscores = 0$/;"	v
plot_detscores	old_verif.py	/^plot_detscores = 0$/;"	v
plot_detscores	verif_parallel.py	/^plot_detscores = 0$/;"	v
plot_domains	test_crps.py	/^plot_domains = False$/;"	v
plot_esal	_old_verif_parallel.py	/^plot_esal = 0$/;"	v
plot_esal	verif_parallel.py	/^plot_esal = 0$/;"	v
plot_fi	_old_verif_parallel.py	/^plot_fi = 0$/;"	v
plot_fi	verif_parallel.py	/^plot_fi = 0$/;"	v
plot_fss	_old_verif_parallel.py	/^plot_fss = 0$/;"	v
plot_fss	verif_parallel.py	/^plot_fss = 0$/;"	v
plot_fv	_old_verif_parallel.py	/^plot_fv = 0$/;"	v
plot_fv	verif_parallel.py	/^plot_fv = 0$/;"	v
plot_obj	_alt_verif_parallel.py	/^plot_obj = False$/;"	v
plot_object_hist	_old_verif_parallel.py	/^plot_object_hist = 0$/;"	v
plot_object_hist	old_verif.py	/^plot_object_hist = 0$/;"	v
plot_object_hist	verif_parallel.py	/^plot_object_hist = 0$/;"	v
plot_performance	_old_verif_parallel.py	/^plot_performance = 0$/;"	v
plot_performance	verif_parallel.py	/^plot_performance = 0$/;"	v
plot_scores	ensemble_verification.py	/^def plot_scores(plotutc):$/;"	f
plot_test	_old_verif_parallel.py	/^def plot_test(data,W,utc,vrbl,dom=0,fcst=False,verif=False,pl=False,$/;"	f
plot_test	verif_parallel.py	/^def plot_test(data,W,utc,vrbl,dom=0,fcst=False,verif=False,pl=False,$/;"	f
plot_thumbnails	ensemble_verification.py	/^def plot_thumbnails(plotutc,vrbl):$/;"	f
plot_thumbs	_old_verif_parallel.py	/^plot_thumbs = 0$/;"	v
plot_thumbs	old_verif.py	/^plot_thumbs = 1$/;"	v
plot_thumbs	verif_parallel.py	/^plot_thumbs = 0$/;"	v
plotdir	test_objectid.py	/^        plotdir = os.path.join(rootdir,'plots\/'),$/;"	v
plotlist	ensemble_verification.py	/^plotlist = ['Verif',''] + list(range(1,11))$/;"	v
plotlist	test_verif.py	/^plotlist = ['Verif',''] + list(range(1,11))$/;"	v
plotroot	extract_fields.py	/^plotroot = '\/home\/john.lawson\/VSE_reso\/pyoutput\/{}'.format(key_plot)$/;"	v
plotutc	_test_newruns.py	/^plotutc = datetime.datetime(2017,5,3,2,0,0)$/;"	v
plotutc	test_verif.py	/^    plotutc = initutc + datetime.timedelta(seconds=int(3600*fhr))$/;"	v
plt	_alt_verif_parallel.py	/^import matplotlib.pyplot as plt$/;"	i
plt	_old_verif_parallel.py	/^import matplotlib.pyplot as plt$/;"	i
plt	_test_newruns.py	/^import matplotlib.pyplot as plt$/;"	i
plt	ensemble_verification.py	/^import matplotlib.pyplot as plt$/;"	i
plt	extract_fields.py	/^import matplotlib.pyplot as plt$/;"	i
plt	test_crps.py	/^import matplotlib.pyplot as plt$/;"	i
plt	test_kde.py	/^import matplotlib.pyplot as plt$/;"	i
plt	test_verif.py	/^import matplotlib.pyplot as plt$/;"	i
plt	verif_parallel.py	/^import matplotlib.pyplot as plt$/;"	i
pp_root	extract_fields.py	/^pp_root = '\/work\/john.lawson\/VSE_reso\/pp\/{}'.format(key_pp)$/;"	v
pres	run_experiments.py	/^            pres = ['wrf.exe' ,  'qr_acr_qg.bin' ,$/;"	v
pres	run_experiments.py	/^            pres = ['wrf.exe' , $/;"	v
prob	test_kde.py	/^                prob = 0.0$/;"	v
prob	test_kde.py	/^                prob = kde.integrate_box_1d(thresh,xmax)*100$/;"	v
quarterly	old_verif.py	/^quarterly = list(N.arange(0.25,3.25,0.25))$/;"	v
ra_lw_physics	generate_namelists.py	/^ra_lw_physics = None$/;"	v
ra_lw_physics	old_generate_namelists.py	/^ra_lw_physics = None$/;"	v
ra_sw_physics	generate_namelists.py	/^ra_sw_physics = None$/;"	v
ra_sw_physics	old_generate_namelists.py	/^ra_sw_physics = None$/;"	v
radardir	ensemble_verification.py	/^radardir = '\/work\/john.lawson\/NEXRAD_data'$/;"	v
radardir	old_verif.py	/^radardir = '\/work\/john.lawson\/NEXRAD_data'$/;"	v
radardir	test_verif.py	/^radardir = '\/work\/john.lawson\/NEXRAD_data'$/;"	v
random	_alt_verif_parallel.py	/^import random$/;"	i
random	_old_verif_parallel.py	/^import random$/;"	i
random	extract_fields.py	/^import random$/;"	i
random	generate_namelists.py	/^import random$/;"	i
random	old_generate_namelists.py	/^import random$/;"	i
random	verif_parallel.py	/^import random$/;"	i
rawpc	test_kde.py	/^                rawpc = (len(fcst1Da[fcst1Da > thresh])\/nmems)*100$/;"	v
rawpc	test_kde.py	/^        rawpc = utils.exceed_probs_2d(fcst,thresh)$/;"	v
rawpc	test_kde.py	/^    rawpc = (len(fcst1D[fcst1D > thresh])\/nmems)*100$/;"	v
rawpc	test_kde.py	/^    rawpc = utils.exceed_probs_2d(fcst,thresh)$/;"	v
rd	old_verif.py	/^rd = dict(nx=50,ny=50)$/;"	v
remove_nans	_old_verif_parallel.py	/^def remove_nans(data,vrbl):$/;"	f
remove_nans	verif_parallel.py	/^def remove_nans(data,vrbl):$/;"	f
reproj_fcst_root	_alt_verif_parallel.py	/^reproj_fcst_root = '\/work\/john.lawson\/VSE_reso\/reproj_fcst\/{}'.format(key_pp)$/;"	v
reproj_fcst_root	_old_verif_parallel.py	/^reproj_fcst_root = '\/work\/john.lawson\/VSE_reso\/reproj_fcst\/{}'.format(key_pp)$/;"	v
reproj_fcst_root	verif_parallel.py	/^reproj_fcst_root = '\/work\/john.lawson\/VSE_reso\/reproj_fcst\/{}'.format(key_pp)$/;"	v
reproj_grid_root	_alt_verif_parallel.py	/^reproj_grid_root = '\/work\/john.lawson\/VSE_reso\/reproj_grid\/{}'.format(key_pp) $/;"	v
reproj_grid_root	_old_verif_parallel.py	/^reproj_grid_root = '\/work\/john.lawson\/VSE_reso\/reproj_grid\/{}'.format(key_pp) $/;"	v
reproj_obs_root	_alt_verif_parallel.py	/^reproj_obs_root = '\/work\/john.lawson\/VSE_reso\/reproj_obs\/{}'.format(key_pp)$/;"	v
reproj_obs_root	_old_verif_parallel.py	/^reproj_obs_root = '\/work\/john.lawson\/VSE_reso\/reproj_obs\/{}'.format(key_pp)$/;"	v
reproj_obs_root	verif_parallel.py	/^reproj_obs_root = '\/work\/john.lawson\/VSE_reso\/reproj_obs\/{}'.format(key_pp)$/;"	v
reproject	test_crps.py	/^from evac.utils.reproject_tools import reproject, WRF_native_grid, create_new_grid, VerifGrid$/;"	i
result_arr	test_kde.py	/^        result_arr = N.array(results)$/;"	v
results	_old_verif_parallel.py	/^                results = pool.map(check_wrfout,iii,)#chunksize=1)$/;"	v
results	_old_verif_parallel.py	/^                results = pool.map(run_parallel,itr,)#chunksize=1)$/;"	v
results	_old_verif_parallel.py	/^            results = []$/;"	v
results	verif_parallel.py	/^                results = pool.map(check_wrfout,iii,)#chunksize=1)$/;"	v
results	verif_parallel.py	/^                results = pool.map(run_parallel,itr,)#chunksize=1)$/;"	v
results	verif_parallel.py	/^            results = []$/;"	v
return_all_mrms	extract_fields.py	/^def return_all_mrms(caseutc):$/;"	f
rmcmd	generate_namelists.py	/^            rmcmd = 'rm {0}'.format(paths_to_nl[n]['new'])$/;"	v
rmcmd	old_generate_namelists.py	/^            rmcmd = 'rm {0}'.format(paths_to_nl[n]['new'])$/;"	v
rootdir	move_around_files.py	/^rootdir = '\/scratch\/john.lawson\/WRF\/VSE_reso\/test\/test_datadir'$/;"	v
rootdir	run_experiments.py	/^        rootdir = PosixPath('\/scratch\/john.lawson\/WRF\/VSE_reso\/{}\/{}\/'.format(key,timestr))$/;"	v
rootdir	test_objectid.py	/^rootdir = '\/work\/john.lawson\/VSE_reso\/objectID_1km\/'$/;"	v
run_kwargs	run_experiments.py	/^        run_kwargs = dict($/;"	v
run_parallel	_old_verif_parallel.py	/^def run_parallel(itr):$/;"	f
run_parallel	verif_parallel.py	/^def run_parallel(itr):$/;"	f
rundir	run_experiments.py	/^        rundir = rootdir$/;"	v
runlen	generate_namelists.py	/^runlen = 3 # Run length in hours$/;"	v
runsec	run_experiments.py	/^            runsec = runsec,$/;"	v
runsec	run_experiments.py	/^        runsec = utils.hr_to_sec(3)$/;"	v
sample	old_generate_namelists.py	/^    from lhsmdu import sample$/;"	i
scipy	extract_fields.py	/^import scipy$/;"	i
scipy_method	test_kde.py	/^scipy_method = 0$/;"	v
scoreroot	extract_fields.py	/^scoreroot = '\/work\/john.lawson\/VSE_reso\/scores\/{}'.format(key_scores)$/;"	v
scores	ensemble_verification.py	/^scores = ['CRPS',]$/;"	v
scores	old_verif.py	/^        scores = DetScores.assign_scores_lookup(DetScores,remove_duplicates=True)$/;"	v
seaborn_method	test_kde.py	/^seaborn_method = 0$/;"	v
seed_lhs	old_generate_namelists.py	/^        seed_lhs = generate_seeds(1)$/;"	v
seeds_skeb	old_generate_namelists.py	/^        seeds_skeb = generate_seeds(nens)$/;"	v
seeds_sppt	old_generate_namelists.py	/^        seeds_sppt = generate_seeds(nens)$/;"	v
skiplist	old_verif.py	/^skiplist = [$/;"	v
skiplist	old_verif.py	/^skiplist = []$/;"	v
sleepsec	run_experiments.py	/^        sleepsec = 3*60*60$/;"	v
smapi	test_kde.py	/^import statsmodels.api as smapi$/;"	i
sns	test_kde.py	/^    import seaborn as sns$/;"	i
ss	_test_newruns.py	/^                ss = folder.split('\/')[-1]$/;"	v
st4_lats	extract_fields.py	/^        st4_lats = N.load(st4_latf)$/;"	v
st4_lons	extract_fields.py	/^        st4_lons = N.load(st4_lonf)$/;"	v
st4dir	_alt_verif_parallel.py	/^st4dir = '\/work\/john.lawson\/STAGEIV_data'$/;"	v
st4dir	_old_verif_parallel.py	/^st4dir = '\/work\/john.lawson\/STAGEIV_data'$/;"	v
st4dir	extract_fields.py	/^st4dir = '\/work\/john.lawson\/STAGEIV_data'$/;"	v
st4dir	old_verif.py	/^st4dir = '\/work\/john.lawson\/STAGEIV_data'$/;"	v
st4dir	test_crps.py	/^st4dir = '\/work\/john.lawson\/STAGEIV_data'$/;"	v
st4dir	verif_parallel.py	/^st4dir = '\/work\/john.lawson\/STAGEIV_data'$/;"	v
stars	_old_verif_parallel.py	/^stars = "*"*10$/;"	v
stars	extract_fields.py	/^stars = "*"*10$/;"	v
stars	verif_parallel.py	/^stars = "*"*10$/;"	v
statsmodels	test_kde.py	/^import statsmodels.api as smapi$/;"	i
statsmodels_method	test_kde.py	/^statsmodels_method = 1$/;"	v
subcpus	_old_verif_parallel.py	/^subcpus = parser.parse_args().subcpus$/;"	v
subcpus	verif_parallel.py	/^subcpus = parser.parse_args().subcpus$/;"	v
subprocess	run_experiments.py	/^        import subprocess$/;"	i
sumdir	test_objectid.py	/^        sumdir = os.path.join(rootdir,'summaryfiles'),$/;"	v
sys	generate_namelists.py	/^import sys$/;"	i
sys	old_generate_namelists.py	/^import sys$/;"	i
testplot	test_crps.py	/^def testplot(data,grid,fname,xx,yy,outdir,clvs=N.arange(1,26,1)):$/;"	f
thefile	_old_verif_parallel.py	/^        thefile = open('\/scratch\/john.lawson\/WRF\/VSE_reso\/ForReal_nco\/failed.txt','w')$/;"	v
thefile	verif_parallel.py	/^        thefile = open('\/scratch\/john.lawson\/WRF\/VSE_reso\/ForReal_nco\/failed.txt','w')$/;"	v
thumbnails	ensemble_verification.py	/^thumbnails = ['REFL_comp',]$/;"	v
time	generate_namelists.py	/^import time$/;"	i
time	old_generate_namelists.py	/^import time$/;"	i
time	run_experiments.py	/^import time$/;"	i
time_me	test_crps.py	/^from evac.utils.misc_tools import time_me$/;"	i
timestr	run_experiments.py	/^        timestr = utils.string_from_time('dir',initutc)$/;"	v
title	test_verif.py	/^                title = 'Member {:02d}'.format(plot)$/;"	v
try_cut_fcst	_old_verif_parallel.py	/^def try_cut_fcst(casestr,E,vrbl,fcstmin,dom_pp,utc,reduce_z=None,$/;"	f
try_cut_fcst	verif_parallel.py	/^def try_cut_fcst(casestr,E,vrbl,fcstmin,dom_pp,utc,reduce_z=None,$/;"	f
try_cut_obs	_old_verif_parallel.py	/^def try_cut_obs(utc,E,obs,vrbl,return_grid=False):$/;"	f
try_cut_obs	verif_parallel.py	/^def try_cut_obs(utc,E,obs,vrbl,return_grid=False):$/;"	f
try_load_newgrid	_old_verif_parallel.py	/^def try_load_newgrid(initstr,E):$/;"	f
try_load_newgrid	verif_parallel.py	/^def try_load_newgrid(initstr,E):$/;"	f
try_reproj_fcst	_old_verif_parallel.py	/^def try_reproj_fcst(initstr,vrbl=None,fcstmin=None,dom_pp=None,E=None,$/;"	f
try_reproj_fcst	verif_parallel.py	/^def try_reproj_fcst(initstr,vrbl=None,fcstmin=None,dom_pp=None,E=None,$/;"	f
try_reproj_obs	_old_verif_parallel.py	/^def try_reproj_obs(dom_pp,obs=None,utc=None,grid=None):$/;"	f
try_reproj_obs	verif_parallel.py	/^def try_reproj_obs(dom_pp,obs=None,utc=None,grid=None):$/;"	f
trysave	_old_verif_parallel.py	/^def trysave(data,fpath):$/;"	f
trysave	verif_parallel.py	/^def trysave(data,fpath):$/;"	f
unsparsify	extract_fields.py	/^def unsparsify(nc,vrbl):$/;"	f
utc	_test_newruns.py	/^        utc = plotutc + datetime.timedelta(seconds=(60*fcstmin))$/;"	v
utils	_alt_verif_parallel.py	/^import evac.utils as utils$/;"	i
utils	_old_verif_parallel.py	/^import evac.utils as utils$/;"	i
utils	_test_newruns.py	/^import evac.utils.utils as utils$/;"	i
utils	ensemble_verification.py	/^import evac.utils as utils$/;"	i
utils	extract_fields.py	/^import evac.utils as utils$/;"	i
utils	old_verif.py	/^import evac.utils as utils$/;"	i
utils	run_experiments.py	/^import evac.utils.utils as utils$/;"	i
utils	test_crps.py	/^import evac.utils as utils$/;"	i
utils	test_kde.py	/^import evac.utils.utils as utils$/;"	i
utils	test_verif.py	/^import evac.utils as utils$/;"	i
utils	verif_parallel.py	/^import evac.utils as utils$/;"	i
vrbl	test_crps.py	/^vrbl = 'accum_precip'$/;"	v
vrbls	_alt_verif_parallel.py	/^vrbls = ("W","accum_precip","REFL_comp",)#"UH02","UH05")$/;"	v
vrbls	_old_verif_parallel.py	/^vrbls = ("W","accum_precip","REFL_comp",)#"UH02","UH05")$/;"	v
vrbls	extract_fields.py	/^vrbls = ("maxW","accum_precip","REFL_comp",)#"UH02","UH05")$/;"	v
wofdir	run_experiments.py	/^        wofdir = PosixPath('\/work\/wof\/realtime\/{}'.format(casestr))$/;"	v
wrfdir	run_experiments.py	/^        wrfdir = PosixPath('\/scratch\/john.lawson\/WRF\/VSE_reso\/my_build\/WRFV3\/run')$/;"	v
wrfdir	test_objectid.py	/^        wrfdir = '\/scratch\/john.lawson\/WRF\/VSE_reso\/ForReal_nco\/2017050501',$/;"	v
wrfout_needed	run_experiments.py	/^            wrfout_needed = utils.string_from_time('wrfout',initutc,dom=1) + '_{}'.format(memno)$/;"	v
x	test_kde.py	/^                x = kde.support$/;"	v
xmax	test_kde.py	/^    xmax = math.ceil(fcst1D.max())$/;"	v
xmin	test_kde.py	/^    xmin = math.floor(fcst1D.min())$/;"	v
xpoints	test_kde.py	/^    xpoints = N.arange(xmin,xmax+0.05,0.05)$/;"	v
y	test_kde.py	/^    y = kde.evaluate(xpoints)$/;"	v
